service: mintable-lite

plugins:
  - serverless-dynamodb
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3000
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      # DynamoDB; will run in memory, instead of using a database file. 
      # When you stop DynamoDB;, none of the data will be saved.
      inMemory: true
      # heapInitial: 200m
      # heapMax: 1g
      # After starting DynamoDB local, create DynamoDB tables from the Serverless configuration.
      migrate: true
      # After starting and migrating dynamodb local, injects seed data into your tables.
      # seed: true
      # you would like the document client to convert empty values (0-length strings, binary buffers, and sets) 
      # to be converted to NULL types when persisting to DynamoDB
      convertEmptyValues: true

provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-1'}
  environment:
    TABLE_NAME: mintable
  iamRoleStatements:
    - Effect: Allow
      Action:
        # - dynamodb:DescribeTable
        - dynamodb:Query
        # - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        # - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_NAME}"


resources:
  Resources:
    MintableTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: mintId
            AttributeType: S
        KeySchema:
          # userId is the partition key used to 
          # retrieve items created only by the specified user
          - AttributeName: userId
            KeyType: HASH
          # mintId is the composite key  
          - AttributeName: mintId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  mint:
    handler: dist/handler.mintToken
    events:
      - http:
          path: mint
          method: post
  get:
    handler: dist/handler.getToken
    events:
      - http:
          path: get/{mintId}
          method: get
  list:
    handler: dist/handler.listTokens
    events:
      - http:
          path: list
          method: get